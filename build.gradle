buildscript {
  configurations.classpath {
    resolutionStrategy.activateDependencyLocking()
  }
}

plugins {
  id('checkstyle')
  id('java-library')
  id('java-test-fixtures')

  alias(libs.plugins.prettyJupiter)
  alias(libs.plugins.sonarlint)
  alias(libs.plugins.spring.boot)
  alias(libs.plugins.spring.management)
  alias(libs.plugins.strictNullCheck)
}

group = 'io.github.joselion'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
    vendor = JvmVendorSpec.ORACLE
  }
  withJavadocJar()
  withSourcesJar()
}

javadoc {
  title('Spring R2DBC Relationships')
  options {
    encoding('UTF-8')
    addBooleanOption('html5', true)
    addStringOption('Xwerror', '-quiet')
    tags('apiNote')
  }
}

jar {
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  from(sourceSets.main.allSource)
  manifest {
    attributes(
      'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
      'Build-Jdk-Spec': java.sourceCompatibility,
      'Created-By': "Gradle ${gradle.gradleVersion}",
      'Implementation-Title': project.name,
      'Implementation-Vendor': 'Jose Luis Leon',
      'Implementation-Version': project.version,
      'Package': "${project.group}.${project.name}",
    )
  }
}

bootJar {
  enabled(false)
}

checkstyle {
  setToolVersion(libs.versions.checkstyle.get())
  setMaxWarnings(0)
}

sonarLint {
  setToolVersion(libs.versions.sonarlint.core.get())
  languages {
    include('java')
  }
  rules {
    enable(
      'java:S4266', // "Stream.collect()" calls should not be redundant
    )
    disable(
      'java:S107', // Allow constructors with more than 7 parameters
      'java:S3776', // Allow methods with more than 15 lines
      'java:S4032', // Allow packages only containing `package-info.java`
    )
  }
}

strictNullCheck {
  addEclipse(libs.versions.eclipse.get())
  packageInfo {
    useEclipse()
    javadoc = '@author Jose Luis Leon'
  }
}

dependencyLocking {
  lockAllConfigurations()
}

// Workaround for: https://github.com/checkstyle/checkstyle/issues/14211
configurations.checkstyle {
  resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
    select("com.google.guava:guava:0")
  }
}

repositories {
  mavenCentral()
}

dependencies {
  annotationProcessor(libs.lombok)
  compileOnly(libs.lombok)
  compileOnly(libs.spring.data.r2dbc)
  compileOnly(libs.spring.webflux)
  sonarlintCorePlugins(libs.sonarlint.java)

  implementation(libs.maybe)
  implementation(libs.reactor.extra)

  testFixturesAnnotationProcessor(libs.lombok)
  testFixturesCompileOnly(libs.lombok)
  testFixturesImplementation(libs.spring.boot.r2dbc)
  testFixturesImplementation(libs.spring.boot.webflux)
  testFixturesRuntimeOnly(libs.h2)
  testFixturesRuntimeOnly(libs.h2.r2dbc)
}

testing {
  suites {
    test {
      useJUnitJupiter(libs.versions.junit.get())

      dependencies {
        annotationProcessor(libs.lombok)
        compileOnly(libs.lombok)
        runtimeOnly(libs.h2)
        runtimeOnly(libs.h2.r2dbc)

        implementation(libs.assertj.core)
        implementation(libs.mockito.core)
        implementation(libs.reactor.test)
        implementation(libs.spring.boot.r2dbc)
        implementation(libs.spring.boot.test)
        implementation(libs.spring.boot.webflux)
      }
    }
  }
}
